---
title: "Hospitalizations in people with HIV"
author: "Heather Henderson"
format: html
editor: visual
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: yes
    toc_float: yes
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r message=FALSE, warning=FALSE}
packages <- function(x){
  for(i in x){
     if(!require(i, character.only = TRUE)){
      install.packages(i, dependencies = TRUE)
       library(i, character.only = TRUE)
    }
  }
}
packages(c("haven", "readxl", "tidyverse" , "data.table" , "naniar", "rockchalk", "lubridate", "kableExtra", "DT", "formatR", "zoo", "binom", "plotly", "janitor", "sjlabelled", "Hmisc", "rms", "aod", "sandwich", "lmtest", "tableone", "broom", "investr", "survminer", "survival", "cmprsk", "condSURV", "tidycmprsk", "gtsummary", "ggsurvfit"))

```

# Data files

```{r}
setwd("J:/ID/CFAR/ID Clinic Database/Projects/Heather/UCHCC/Hospitalizations")

demographic <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/demographic.sas7bdat")
diagnosis <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/diagnosis.sas7bdat")
discharged <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/dischargedx.sas7bdat")
geographic <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/geographic.sas7bdat")
insurance <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/insurance.sas7bdat")
hiv_labs <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/Hospitalization Adjudications Project/hivlabs.sas7bdat")
hospitalization <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/hospitalization.sas7bdat")
medication <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/medication.sas7bdat")
procedure <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/procedure.sas7bdat")
riskfactor <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/riskfactor.sas7bdat")
visitappointment <- read_sas("J:/ID/CFAR/ID Clinic Database/Clinical Core/Admin II/Projects/CNICS/CNICS_Submissions/2024_07/FINAL/visitappointment.sas7bdat")
ccs_icd10 <- read_excel("J:/ID/CFAR/ID Clinic Database/Projects/Heather/UCHCC/Hospitalizations/DXCCSR_v2025-1.xlsx")
zip_ses <- read_excel("J:/ID/CFAR/ID Clinic Database/Projects/Heather/UCHCC/Hospitalizations/zip_ses.xlsx")
```

# Data cleaning
## Demographics

```{r}
demographic <- demographic |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  mutate(race_eth = case_when(race %in% c("american indian", "asian", "") ~ "other",
                              hispanic == "yes" ~ "hispanic",
                              TRUE ~ race),
         gender = ifelse(present_sex == "intersexed", "other", present_sex)) |>
  select(patient_key, birth_year, gender, race_eth, death_date) |>
  filter(is.na(death_date) | death_date > as.Date("2015-01-01"))
# N = 3615
```

### Insurance

```{r}
insurance1 <- insurance |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(patient_key, insurance_type, insurance_start_date, qualifying_visit1, orig_uncentrytocare) |>
  group_by(patient_key, insurance_type) |>
  slice(which.min(insurance_start_date)) |>
  ungroup() |>
  mutate(insurance_type = ifelse(insurance_type %in% c("other public insurance (specify)", "uninsured/self-pay", "unknown insurance status"), "other", insurance_type)) |>
  filter(patient_key %in% demographic$patient_key)
```

### Residence

```{r}
geographic1 <- geographic |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  filter(patient_key %in% demographic$patient_key) |>
  distinct() |>
  group_by(patient_key) |>
  slice(which.max(geographic_date)) |>
  ungroup() |>
  left_join(zip_ses |> mutate(zip_code = as.character(zip_code)), relationship = "many-to-many") |>
  select(patient_key, geographic_date, zip_code, city, state, census_tract, pctile)
```

### HIV risk factor

```{r}
riskfactor1 <- riskfactor |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(patient_key, risk) |>
  mutate(risk = case_when(risk == "heterosexual contact - unspecified" ~ 1,
                          risk == "injection drug use" ~ 2,
                          risk == "men who have sex with men" ~ 3,
                          risk == "perinatal" ~ 4,
                          risk == "receipt of blood transfusion, blood components, or tissue" ~ 5,
                          risk == "worked in health care or laboratory setting" ~ 6,
                          risk == "other" ~ 7),
         risk = factor(risk, labels = c("hetero", "idu", "msm", "perinatal", "blood_tissue", "health_lab", "other_risk"))) |>
  filter(patient_key %in% demographic$patient_key)

risk_factor_wide <- riskfactor1 |>
  mutate(a = TRUE) |>
  pivot_wider(names_from = risk, values_from = a, values_fill = FALSE)
```

#### Merge demographic variables

```{r}
demographic1 <- demographic |>
  left_join(insurance1 |> select(patient_key, insurance_type, insurance_start_date)) |>
  left_join(geographic1 |> select(patient_key, zip_code, census_tract, pctile), relationship = "many-to-many") |>
  left_join(risk_factor_wide |> select(-other_risk)) |>
  # Replace missing values with median
  mutate(pctile = ifelse(is.na(pctile), median(pctile, na.rm = TRUE), pctile),
         ses_quartile = ntile(pctile, 4), na.rm = TRUE)
```

## Clinical variables
### HIV labs

```{r}
labs <- hiv_labs |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(patient_key, test_name, result, units, result_date)
```

### All diagnoses and ADIs

```{r}
diagnosis1 <- diagnosis |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(patient_key, diagnosis_name, diagnosis_date, is_adi, data_source) |>
  filter(patient_key %in% demographic$patient_key,
         data_source == "data collected at cnics site") |>
  select(-data_source)

adi <- diagnosis1 |>
  filter(is_adi == "yes") |>
  select(patient_key, diagnosis_date) |>
  group_by(patient_key) |>
  slice(which.min(diagnosis_date)) |>
  ungroup()
```

### Hospital admissions and primary discharge diagnoses

```{r}
discharged1 <- discharged |>
  clean_names() |>
  mutate_if(is.character, str_to_lower) |>
  filter(admit_date > as.Date("2016-01-01")) |>
  mutate(discharge_dx = str_remove(discharge_dx, "\\.")) |>
  select(patient_key, discharge_dx, dx_code_name, discharge_dx_date, ranking, encounter_id, admit_date, discharge_date) |>
  filter(patient_key %in% demographic$patient_key)
```

### ICD-10 CCS categories

```{r}
# ICD-10 CM Clinical Classification Software
ccs <- ccs_icd10 |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(icd_10_cm_code, icd_10_cm_code_description, ccsr_category_1_description) |>
  rename(dx_code = icd_10_cm_code,
         code_descr = icd_10_cm_code_description,
         cat_descr = ccsr_category_1_description)
```


```{r}
discharge_primarydx_index <- discharged1 |>
  left_join(ccs, by = c("discharge_dx" = "dx_code"), relationship = "many-to-many") |>
  group_by(patient_key) |>
  slice_min(discharge_date) |>
  ungroup() |>
  group_by(encounter_id) |>
  slice(which.min(ranking)) |>
  ungroup()

n_distinct(discharge_primarydx_index$patient_key)
# N = 771
```

### Medications

```{r}
medication <- medication |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  filter(type == "arv") |>
  select(patient_key, medication_name, start_date, start_date_precision, end_date, end_date_precision) |>
  filter(patient_key %in% demographic$patient_key,
         start_date_precision != "unknown",
         end_date_precision != "unknown")
```

### Clinic visits

```{r}
visitappointment <- visitappointment |>
  clean_names() |>
  mutate_if(is.character, str_to_lower) |>
  select(patient_key, appt_status, encounter_date, encounter_type, department, encounter_location) |>
  filter(patient_key %in% demographic$patient_key)

initial_visits <- visitappointment |>
  filter(encounter_type == "initial") |>
  select(patient_key, encounter_date)
```

# Create hospitalizations dataset
## All admissions

```{r}
admissions_all <- discharged1 |>
  select(patient_key, admit_date, discharge_date) |>
  distinct() |>
  left_join(demographic1, relationship = "many-to-many") |>
  filter(admit_date > insurance_start_date) |>
  # Select observation with most proximal insurance start date
  group_by(patient_key, admit_date) |>
  slice(which.min(admit_date - insurance_start_date)) |>
  ungroup()
```

```{r}
admissions_all1 <- admissions_all |>
  left_join(initial_visits) |>
  mutate(year_admit = year(admit_date),
         age_at_index = year_admit - birth_year,
         los = as.numeric(discharge_date - admit_date)) |>
  filter(!is.na(admit_date),
         admit_date > encounter_date,
         # Remove those discharged same day as admission
         los > 0) |>
  add_count(patient_key, name = "num_admits") |>
  # Remove those who died during first hospital admission or died within 180 days of discharge without readmission
  filter(!(num_admits == 1 & death_date - discharge_date <= 180) | is.na(death_date)) |>
  group_by(patient_key) |>
  arrange(admit_date, discharge_date) |>
  # Some readmitted on same day as discharge - transfers
  mutate(days_to_readmit = as.numeric(admit_date - dplyr::lag(discharge_date))) |> 
  ungroup() |>
  select(-c(num_admits, encounter_date))
```

```{r}
admissions_all2 <- admissions_all1 |>
  arrange(patient_key, admit_date) |>
  group_by(patient_key) |>
  # If transferred, replace admit date with prior admit date
  mutate(admit_date2 = as.Date(ifelse(days_to_readmit == 0, dplyr::lag(admit_date), admit_date))) |> 
  ungroup() |>
  # Create indicator for same day readmission
  mutate(same_day = ifelse(dplyr::lead(days_to_readmit) == 0, TRUE, FALSE), 
         same_day = ifelse(is.na(same_day), FALSE, same_day),
         # Overwrite original admit date where different
         admit_date = as.Date(ifelse(!is.na(admit_date2), admit_date2, admit_date))) |> 
  # Remove first admission before transfer
  filter(!same_day) |> 
  select(-c(admit_date2, same_day)) |>
  arrange(patient_key, admit_date) |>
  group_by(patient_key) |>
  mutate(n = row_number(),
         # Recreate days_to_admit variable since transfers recorded as single admission
         days_to_readmit = as.numeric(admit_date - dplyr::lag(discharge_date))) |> 
  ungroup()

n_distinct(admissions_all2$patient_key)
# 716
```

## Index and readmissions

```{r}
# Index admissions
# N = 716
admissions_index <- admissions_all2 |>
  group_by(patient_key) |>
  # Select index admission
  slice(which.min(admit_date)) |> 
  ungroup() |> 
  select(-c(n, days_to_readmit))

# Readmissions within 180 days of index
# N = 184
admissions_180d <- admissions_all2 |>
  filter(n == 2 & days_to_readmit %in% 1:180) |>
  select(-n)

n_distinct(admissions_index$patient_key)
n_distinct(admissions_180d$patient_key)
```

## Prior hospitalizations

```{r}
prior_hosp <- hospitalization |>
  clean_names() |>
  select(patient_key, admit_date) |>
  distinct() |>
  rename(prior_admit_date = admit_date) |>
  left_join(admissions_index |> select(patient_key, admit_date)) |>
  # Remove admissions after index
  filter(admit_date > prior_admit_date) |> 
  # Get number of admissions prior to index
  add_count(patient_key, name = "num_prior_admissions") |> 
  group_by(patient_key) |>
  # Select most recent admission prior to index
  slice(which.max(prior_admit_date)) |> 
  ungroup() |>
  select(patient_key, admit_date, prior_admit_date, num_prior_admissions) |>
  distinct()
```

Remove patients with admissions within 180 days prior to index, add variable for readmission within 180 days

```{r}
df1 <- admissions_index |>
  left_join(prior_hosp |> select(patient_key, prior_admit_date, num_prior_admissions) |> distinct()) |>
  left_join(admissions_180d |> select(patient_key, days_to_readmit)) |>
  mutate(num_prior_admissions = ifelse(is.na(num_prior_admissions), 0, num_prior_admissions),
         readmit_180 = ifelse(!is.na(days_to_readmit), TRUE, FALSE)) |>
  filter(admit_date - prior_admit_date > 180 | is.na(prior_admit_date)) |> 
  select(-c(prior_admit_date, days_to_readmit))
```

Prior ADIs and primary discharge diagnoses

```{r}
df2 <- df1 |>
  left_join(adi) |>
  mutate(adi = ifelse(admit_date < diagnosis_date | is.na(diagnosis_date), FALSE, TRUE)) |>
  select(-diagnosis_date) |>
  left_join(discharge_primarydx_index |> select(patient_key, discharge_dx, cat_descr))
df2 |> tabyl(readmit_180)
```

## Labs

```{r}
labs1 <- labs |>
  inner_join(admissions_index |> select(patient_key, admit_date)) |>
  filter(result != "detected",
         result_date < admit_date) |>
  mutate(result1 = str_replace_all(result, pattern = "<|>|/|copies|copies|ml", replacement = ""),
         result1 = str_replace(result1, pattern = "not detected|undetected|undetectable", replacement = "0"),
         result = as.numeric(result1)) |>
  select(-result1)
  
lab_cd4_nadir <- labs1 |>
  filter(test_name == "cd4 cell absolute") |>
  group_by(patient_key) |>
  slice(which.min(result)) |>
  ungroup() |>
  rename(cd4_nadir = result,
         cd4_nadir_date = result_date)

lab_cd4_current <- labs1 |>
  filter(test_name == "cd4 cell absolute") |>
  group_by(patient_key) |>
  slice(which.min(admit_date - result_date)) |>
  ungroup() |>
  mutate(result = ifelse(admit_date - result_date > 730, NA, result)) |>
  filter(!is.na(result)) |>
  rename(cd4_recent = result,
         cd4_recent_date = result_date)

lab_rna_current <- labs1 |>
  filter(str_detect(test_name, "rna")) |>
  group_by(patient_key) |>
  slice(which.min(admit_date - result_date)) |>
  ungroup() |>
  mutate(result = ifelse(admit_date - result_date > 730, NA, result),
         suppressed_vl = ifelse(result <= 50, TRUE, FALSE)) |>
  filter(!is.na(result)) |>
  rename(rna_recent = result,
         rna_recent_date = result_date)
```

```{r}
df3 <- df2 |>
  left_join(lab_cd4_nadir |> select(patient_key, cd4_nadir, cd4_nadir_date)) |>
  left_join(lab_cd4_current |> select(patient_key, cd4_recent, cd4_recent_date)) |>
  left_join(lab_rna_current |> select(patient_key, rna_recent, rna_recent_date, suppressed_vl))
```

## ARVs

```{r}
art_start <- medication |>
  inner_join(df1 |> select(patient_key, admit_date)) |>
  mutate(days_since_art_start = as.numeric(admit_date - start_date),
         days_since_art_end = as.numeric(admit_date - end_date)) |>
  filter(days_since_art_start > 0)

art_start1 <- art_start |>
  group_by(patient_key) |>
  slice(which.max(days_since_art_start)) |>
  ungroup()

art_at_admission <- art_start |>
  group_by(patient_key) |>
  slice(which.min(days_since_art_start)) |>
  ungroup() |>
  filter(days_since_art_end > 1)
```

```{r}
df4 <- df3 |>
  left_join(art_at_admission |> select(patient_key) |> mutate(art_at_admission = FALSE)) |>
  left_join(art_start1 |> select(patient_key, days_since_art_start)) |>
  mutate(art_at_admission = ifelse(is.na(art_at_admission), TRUE, art_at_admission))
```

## Clinic visits

```{r}
clinic_visits <- visitappointment |>
  inner_join(df1 |> select(patient_key, admit_date)) |>
  filter(appt_status == "arrived",
         encounter_type %in% c("hiv primary care", "initial"),
         admit_date > encounter_date) |>
  mutate(days_since_clinic_visit = as.numeric(admit_date - encounter_date)) |>
  group_by(patient_key) |>
  slice(which.min(days_since_clinic_visit)) |>
  ungroup()
```

```{r}
df5 <- df4 |>
  select(patient_key, gender, race_eth, zip_code, census_tract, ses_quartile, year_admit, age_at_index, insurance_type, msm, idu, adi, discharge_dx, cat_descr, cd4_nadir, cd4_recent, suppressed_vl, num_prior_admissions, art_at_admission, days_since_art_start, los, readmit_180) |>
  left_join(clinic_visits |> select(patient_key, days_since_clinic_visit)) |>
  mutate(cd4_nadir = ifelse(is.na(cd4_nadir), median(cd4_nadir, na.rm = TRUE), cd4_nadir))

names(df5)
# fwrite(df5, "J:/ID/CFAR/ID Clinic Database/Projects/Heather/UCHCC/Hospitalizations/CNICS_hosp_readmission.csv")
```

```{r}
describe_missingness <- function(data) {
  # Create a summary table
  missing_summary <- data |>
    summarise(across(everything(), ~ sum(is.na(.)), .names = "{.col}")) |>
    pivot_longer(everything(), names_to = "variable", values_to = "missing_count") |>
    mutate(
      total_rows = nrow(data),
      missing_percent = (missing_count / total_rows) * 100
    )
  
  return(missing_summary)
}
describe_missingness(df5) |> filter(missing_count > 0)
```










